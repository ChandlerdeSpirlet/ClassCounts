
<!--Including Header Partial-->

<% if (messages.error) { %>
    <p style="color:red"><%- messages.error %></p>
<% } %>
<% if (messages.success) { %>
    <p style="color:blue"><%- messages.success %></p>
<% } %>
<script type="text/javascript">
    var err = <%- JSON.stringify(messages) %>;
    console.log(err);
</script>
<!DOCTYPE html>
<html lang="en">
<style>
body {
    background-color: black;
    color: white;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    margin: 0px;
}
header {
    text-align: center;
    display: inline-block;
    width: -webkit-fill-available;
}
header a {
    color: white;
    text-decoration: none;
}
header ul {
    background-color: #333;
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
}
header li {
    float: left;
}
li a, .dropbtn {
    display: inline-block;
    color: white;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
}
li a:hover, .dropdown:hover  .dropbtn {
    background-color: blue;
}
.check {
    color: lightgreen;
    padding-left: 5px;
    position: fixed;
    padding-top: 10px;
}
.dropdown-content {
    display: none;
    position: absolute;
    background-color: #333;
    min-width: 160px;
    z-index: 1;
}
.dropdown:hover .dropdown-content {
    display: block;
}
.dropdown-content a {
    display: block;
    text-align: left;
    padding: 12px 16px;
}
.student-card {
    position: relative;
    display: block;
    text-align: -webkit-center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background-color: rgba(255,255,255, .15);
    box-shadow: 0px 4px 1rem rgba( 255,255,255, 0.9);
    /* border-radius: 4px; */
    color: white;
    font-size: x-large;
}
.student-content {
    display: none;
    padding: 0.5rem;
    /* background-color: #f9f9f9; */
    background-color: rgba( 251,251,251, .95);
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    border-radius: 4px;
    z-index: 1;
    margin-top: 1rem;
}
.student-content div {
    color: black;
    padding: 12px;
    text-decoration: none;
    display: block;
    font-size: smaller;
}
.student-content a:hover {
    background-color: #f1f1f1;
    -webkit-appearance: button;
    width: -webkit-fill-available;
}
.student-card:hover .student-content {
    display: block;
}
.student-card:hover {
    /* background-color: blue; */
    background-color: rgba( 0,0,204, .8);
    color: white;
}
div.student-card:hover a {
    color: white;
}
.student-content-defaults {
    float: left;
    margin: -0.5rem 0.5rem -0.5rem -0.5rem;
    padding: .625rem .5rem .625rem;
    font-size: .75rem;
    font-weight: bold;
    background: rgba( 0,0,255, 0.1);
    color: blue;
}
.barcode {
    float: left;
    width: 50%;
}
.barcode:before{
    content: "Card Number";
    float: left;
    margin: -0.5rem 0.5rem -0.5rem -0.5rem;
    padding: .625rem .5rem .625rem;
    font-size: .75rem;
    font-weight: bold;
    background: rgba( 0,0,255, 0.1);
    color: blue;
    border-radius: 4px;
}
.regular::before {
    content: "Regular Class";
    float: left;
    margin: -0.5rem 0.5rem -0.5rem -0.5rem;
    padding: .625rem .5rem .625rem;
    font-size: .75rem;
    font-weight: bold;
    background: rgba( 0,0,255, 0.1);
    color: blue;
    border-radius: 4px;
}

.camp {
    background-color: blue;
    border: solid black 1px;
}
.camp a:hover {
    background-color: blue;
}
.sparring {
    float: left;
    width: 50%;
}
.sparring::before {
    content: "Sparring Class";
    float: left;
    margin: -0.5rem 0.5rem -0.5rem -0.5rem;
    padding: .625rem .5rem .625rem;
    font-size: .75rem;
    font-weight: bold;
    background: rgba( 0,0,255, 0.1);
    color: blue;
    border-radius: 4px;
}
.swats::before {
    content: "SWAT Class";
    float: left;
    margin: -0.5rem 0.5rem -0.5rem -0.5rem;
    padding: .625rem .5rem .625rem;
    font-size: .75rem;
    font-weight: bold;
    background: rgba( 0,0,255, 0.1);
    color: blue;
    border-radius: 4px;
}
.nameField {
    all: unset; 
    width: -webkit-fill-available;
}

.day {
    background-color: white;
    color: black;
}
.day .student-card {
    background-color: #333;
    box-shadow: 0px 4px 1rem rgba( 0,0,0, 0.9);
}
* { box-sizing: border-box; }
body {
  font: 16px Arial; 
}
.autocomplete {
  /*the container must be positioned relative:*/
  position: relative;
  display: inline-block;
}
.day input {
  border: 1px solid transparent;
  background-color: #d4d4d4;
  padding: 10px;
  font-size: 16px;
}
input {
    border: 1px solid transparent;
    background-color: black;
    padding: 10px;
    font-size: 16px;
}
input[type=text] {
  background-color: black;
  width: 100%;
}
.day input[type=text] {
    background-color: #d4d4d4;
    width: 100%
}
input[type=submit] {
  background-color: blue;
  color: black;
}
.day input[type=submit]{
    background-color: blue;
    color: white;
}
.autocomplete-items {
  position: absolute;
  border: 1px solid black;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}
.day .autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}
.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: black; 
  border-bottom: 1px solid #d4d4d4; 
}
.day .autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: white; 
  border-bottom: 1px solid #d4d4d4; 
}
.autocomplete-items div:hover {
  /*when hovering an item:*/
  background-color: black; 
}
.day .autocomplete-items div:hover {
  /*when hovering an item:*/
  background-color: white; 
}
.autocomplete-active {
  /*when navigating through the items using the arrow keys:*/
  background-color: blue !important; 
  color: black; 
}
.day .autocomplete-active {
  /*when navigating through the items using the arrow keys:*/
  background-color: blue !important; 
  color: white; 
}
.barcode::before, .sparring::before, .regular::before, .swats::before {
    width: 85px;
}
@media only screen and (max-width: 413px){
    .barcode, .sparring {
        width: unset;
        float: unset;
    }

}
</style>
<head>
	<!-- The param which is passed from render-->
    <title><%= title %></title>
    
	<!-- Here is the web page I referenced for the idea of sticky header. -->
	<!-- https://www.w3schools.com/howto/howto_js_sticky_header.asp -->
    <meta charset="UTF-8">
	<meta content="width=device-width, initial-scale=1.0" name="viewport">
</head>
<header>
    <ul>
        <li><a href="#">Home</a></li>
        <li><a href="/store/login">Login</a></li>
        <li><a href="/store/email">Contact</a></li>
    </ul>
    <h1>Black Belt Class Counts</h1><br>
    <h2><%= title %></h2>
    <h3>Class Requirements</h3>
    <h5>Swats: 10</h5>
    <h6 style="font: italic;">Note: Regular and Sparring classes are no longer considered for testing.</h6>
</header>
<body id="body-content">
        <% if (data) { %>
            <% data.forEach(function(item){ %>
        <div class="student-card">
            <button class="nameField"><%= item.bbname %></button>
            <div class="student-content">
                <div class="barcode"><%= item.barcode %></div>
                <div class="regular"><%= item.regular %></div>
                <div class="sparring"><%= item.sparring %></div>
                <div class="swats"><%= item.swats %></div>
                <div class="camp"><a sty href='/store/history/<%= item.barcode %>'>Class History</a></div>
            </div>
        </div>
                <% }) %>
            <% } %>
        <script>
            var x = "True";
            var y = "False";
            var localTime = new Date();
            // var localTime = new Date(2018, 11, 24, 10, 33);
            var hours   = localTime.getHours();
            console.log(hours, ' -hours');
            var timeString = "" + hours;
            
            console.log('localTime is ', localTime);
            console.log(timeString);
    
            if (hours >= 7 && hours <= 19) {
                console.log(x);
                document.getElementById("body-content").classList.add('day');
            } else {
                console.log(y);
                // document.getElementById("body-content").classList.add('dark');
            }
        </script> 
        <script>
            var names = ["Aaron Pidek", "Andre de Spirlet", "Benjamin Mansanares", "Beth Flythe", "Bobert Hoffman", "Caden Stutz", "Cedric McPhee", "Daniel Lynch", "Dave Hoffmann", "Domenic Colaizzi", "Eli Pinsky", "Emma Pratt", "Evan Jantz", "Garrett Manuello", "Hayley Pidek", "Heather Steyn", "Jake Augut", "Jennifer Panning", "Jessica Mestas", "Justice Ortega", "Kaylee Flythe", "Kaylee Young", "Kimberly Rosene", "Kurt Nagel", "Kyle Pinkerton", "Lauren Hawley", "Lucas Cooper", "Madison Bowman", "Mackenzie Silverthorn", "Makiah Anderson", "Max Anderson", "Nick Mansanares", "Olivia Wachter", "Patrick Aasheim", "Riane Dobnak", "Rob Rosene", "Seanna Pidek", "Seth Rosene", "Tanner Schmitz", "Tanner Teff", "Tiana Skanderbeg", "William Parker", "Will Masche"];
            function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
            }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function(e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
            }
        }
    });
    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }
    function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
            }
        }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
        closeAllLists(e.target);
    });
    }
        </script>
        <script>
                autocomplete(document.getElementById("result"), names);
        </script>
    </body>
</html>
<%- include ../layouts/footer.ejs %>