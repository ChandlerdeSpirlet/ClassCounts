<% if (messages.error) { %>
    <p style="color:red"><%- messages.error %></p>
<% } %>
<% if (messages.success) { %>
    <p style="color:blue"><%- messages.success %></p>
<% } %>
<html>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grading for <% bbname %></title>
    <style>
        * {
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        }
        html {
            background-image: linear-gradient(#03d3fc, #ceeef5);
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: cover;
        }
        button, label, input, select {
            display: block;
            font-size: 100%;
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            width: 100%;
            padding: 5px;
            height: 30px;
        }
        select {
            -webkit-appearance: none;
            appearance: none;
        }

        .select-wrapper {
            position: relative;
        }

        .select-wrapper::after {
            content: "â–¼";
            font-size: 1rem;
            top: 6px;
            right: 10px;
            position: absolute;
        }

        input[type="text"], select {
            box-shadow: inset 1px 1px 3px #ccc;
            border-radius: 5px;
        }

        label {
            margin-bottom: 5px;
        }

        button {
            width: 60%;
            margin: 0 auto;
        }
        label{
            font-weight: bold;
        }
        h1, h3, h5 {
            text-align: center;
        }
        .autocomplete {
            position: relative;
            display: inline-block;
        }
        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
        }
        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff; 
            border-bottom: 1px solid #d4d4d4; 
        }
        .autocomplete-items div:hover {
            background-color: #e9e9e9; 
        }
        .autocomplete-active {
            background-color: DodgerBlue !important; 
            color: #ffffff; 
        }
    </style>
    <div id="grad1">
        <head>
            <h1>Sparring Card for <%= bbname %></h1>
            <h3>Number of grades: <%= data[0].card_count %></h3><br>
            <h5>5 grades are needed for a significant test</h5>
            <h5>3 grades are needed for a progress check</h5>
        </head>
        <body>
            <% if (data[0].card_count < 5) { %>
            <form action="/store/sparring_card" method="POST" autocomplete="off">
                <label for="bb_grader">Grader</label>
                <!--<input type="text" id="bb_grader" name="bb_grader" placeholder="Black Belt Grader" required/><br>-->
                <div class="autocomplete">
                    <input id="bb_grader" type="text" name="bb_grader" placeholder="Black Belt Grader" required>
                </div>
                <label for="attack">Attack</label>
                <div class="select-wrapper"><select name="attack" id="attack" name="attack" required>
                    <optgroup label="Attack Grade">
                        <option value="1">1 &mdash; Poor</option>
                        <option value="2">2 &mdash; Average</option>
                        <option value="3">3 &mdash; Good</option>
                        <option value="4">4 &mdash; Awesome</option>
                    </optgroup>
                </select></div><br>
                <label for="defense">Defense</label>
                <div class="select-wrapper"><select name="defense" id="defense" required>
                    <optgroup label="Defense Grade">
                        <option value="1">1 &mdash; Poor</option>
                        <option value="2">2 &mdash; Average</option>
                        <option value="3">3 &mdash; Good</option>
                        <option value="4">4 &mdash; Awesome</option>
                    </optgroup>
                </select></div><br>
                <label for="footwork">Footwork</label>
                <div class="select-wrapper"><select name="footwork" id="footwork" required>
                    <optgroup label="Footwork Grade">
                        <option value="1">1 &mdash; Poor</option>
                        <option value="2">2 &mdash; Average</option>
                        <option value="3">3 &mdash; Good</option>
                        <option value="4">4 &mdash; Awesome</option>
                    </optgroup>
                </select></div><br>
                <label for="technique">Respect of Technique</label>
                <div class="select-wrapper"><select name="technique" id="technique" required>
                    <optgroup label="Respect of Technique Grade">
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                    </optgroup>
                </select></div><br>
                <label for="control">Control</label>
                <div class="select-wrapper"><select name="control" id="control" required>
                    <optgroup label="Control Grade">
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                    </optgroup>
                </select></div><br>
                <input type="hidden" name="card_count" value="<%= data[0].card_count %>"/>
                <input type="hidden" name="testerID" value="<%= testerID %>"/>
                <input type="hidden" name="bbname" value="<%= bbname %>"/>
                <input type="submit" name="submit" value="Grade"/>
            </form>
            <% } else { %>
                <h3><% bbname %> has reached their maximum number of grades and cannot receive any further grades.</h3>
            <% } %>
        </body>
    </div>
    <% var temp = []; for (int i = 0; i < data.length; i++) { temp.push(data[i].get_names); } %>
</html>
<script>
    function autocomplete(inp, arr) {
      /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
      var currentFocus;
      /*execute a function when someone writes in the text field:*/
      inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          /*close any already open lists of autocompleted values*/
          closeAllLists();
          if (!val) { return false;}
          currentFocus = -1;
          /*create a DIV element that will contain the items (values):*/
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          /*append the DIV element as a child of the autocomplete container:*/
          this.parentNode.appendChild(a);
          /*for each item in the array...*/
          for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              /*create a DIV element for each matching element:*/
              b = document.createElement("DIV");
              /*make the matching letters bold:*/
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              /*insert a input field that will hold the current array item's value:*/
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
                  /*insert the value for the autocomplete text field:*/
                  inp.value = this.getElementsByTagName("input")[0].value;
                  /*close the list of autocompleted values,
                  (or any other open lists of autocompleted values:*/
                  closeAllLists();
              });
              a.appendChild(b);
            }
          }
      });
      /*execute a function presses a key on the keyboard:*/
      inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
              /*and simulate a click on the "active" item:*/
              if (x) x[currentFocus].click();
            }
          }
      });
      function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
      }
      function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
          x[i].classList.remove("autocomplete-active");
        }
      }
      function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
          if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
          }
        }
      }
      /*execute a function when someone clicks in the document:*/
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
    }
    
    /*An array containing all the country names in the world:*/
    var countries = <%= temp %>;
    console.log(countries);
    
    
    /*initiate the autocomplete function on the "bb_grader" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("bb_grader"), countries);
    </script>
    
    